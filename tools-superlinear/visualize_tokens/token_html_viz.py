#!/usr/bin/env python3
"""
Create HTML visualization of token probabilities.

This script creates an HTML visualization of token probabilities from
the JSON token data generated by llama.cpp.

Two modes available:
- absolute: shows 1/p where p is the absolute probability
- relative: shows 1/(p/max(candidates)) where p is the token's probability
"""

import argparse
import os
import sys

import matplotlib.colors as mcolors
from loguru import logger

# Import the token loading function
from utils import load_jsonl


def get_color_for_score(score, max_score=10.0):
    """Get a color for a score based on its value - simple green with varying intensity."""
    # Clamp score to max_score
    score = min(score, max_score)
    
    # Normalize score to 0-1 range
    intensity = score / max_score
    
    # Simple green with varying intensity (0-255)
    # Higher score = BRIGHTER green (not darker)
    green_value = 255 - int(50 + 205 * intensity)  # Range from dark green (50) to bright green (255)
    
    # Return hex color
    return f"#00{green_value:02x}00"

def create_html_visualization(tokens, output_file, mode='absolute'):
    """Create an HTML visualization of token probabilities."""
    # Process tokens
    token_data = []
    
    for token in tokens:
        token_id = token.get('selected_token_id')
        prob = token.get('selected_probability')
        
        if token_id is None or prob is None:
            continue
            
        # Calculate score based on mode
        if mode == 'relative':
            # Get max probability from candidates
            candidates = token.get('tokens', [])
            if candidates:
                max_prob = max(t.get('probability', 0) for t in candidates)
                score = 1.0 / (prob / max_prob) if max_prob > 0 else float('inf')
            else:
                score = 1.0
        else:  # absolute mode
            score = 1.0 / prob if prob > 0 else float('inf')
            
        # Get color for score
        color = get_color_for_score(score)
        
        token_data.append({
            'token_id': token_id,
            'probability': prob,
            'score': score,
            'color': color
        })
    
    # Create HTML
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Token Probability Visualization</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 20px;
            }
            .token-container {
                display: flex;
                flex-wrap: wrap;
                margin-top: 20px;
            }
            .token {
                display: inline-block;
                padding: 5px 10px;
                margin: 2px;
                border-radius: 3px;
                font-family: monospace;
                font-weight: bold;
            }
            .tooltip {
                position: relative;
                display: inline-block;
            }
            .tooltip .tooltiptext {
                visibility: hidden;
                width: 200px;
                background-color: #555;
                color: #fff;
                text-align: left;
                border-radius: 6px;
                padding: 5px;
                position: absolute;
                z-index: 1;
                bottom: 125%;
                left: 50%;
                margin-left: -100px;
                opacity: 0;
                transition: opacity 0.3s;
                font-size: 12px;
            }
            .tooltip:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
            .legend {
                margin-top: 20px;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                background-color: #f9f9f9;
            }
            .legend-item {
                display: inline-block;
                width: 20px;
                height: 20px;
                margin-right: 5px;
                vertical-align: middle;
            }
            .mode-selector {
                margin-top: 20px;
            }
            .mode-selector label {
                margin-right: 15px;
            }
        </style>
    </head>
    <body>
        <h1>Token Probability Visualization</h1>
        <p>This visualization shows tokens colored by their probability scores.</p>
        
        <div class="mode-selector">
            <strong>Mode:</strong>
            <form method="GET">
                <label>
                    <input type="radio" name="mode" value="absolute" onchange="this.form.submit()" """ + ("checked" if mode == 'absolute' else "") + """>
                    Absolute (1/p)
                </label>
                <label>
                    <input type="radio" name="mode" value="relative" onchange="this.form.submit()" """ + ("checked" if mode == 'relative' else "") + """>
                    Relative (1/(p/max_p))
                </label>
                <input type="hidden" name="file" value=""" + os.path.basename(output_file) + """>
            </form>
        </div>
        
        <div class="token-container">
    """
    
    # Add legend
    html_content += """
    <div class="legend">
        <h3>Legend</h3>
        <p>Green intensity represents token scores (1/probability):</p>
        <div style="display: flex; align-items: center; margin-top: 10px; margin-bottom: 15px;">
            <span style="display: inline-block; width: 20px; height: 20px; background-color: #003200;"></span>
            <span style="margin: 0 5px;">→ High score (low probability)</span>
            <span style="display: inline-block; width: 20px; height: 20px; background-color: #00ff00;"></span>
            <span style="margin: 0 5px;">→ Low score (high probability)</span>
        </div>
        
        <div style="display: flex; align-items: center; margin-top: 5px;">
            <span style="display: inline-block; width: 300px; height: 20px; background: linear-gradient(to right, #003200, #00ff00);"></span>
            <span style="margin-left: 10px;">Score gradient (low to high)</span>
        </div>
    </div>

    <div/>
"""
    
    # Add tokens
    for i, token in enumerate(token_data):
        token_id = token['token_id']
        prob = token['probability']
        score = token['score']
        color = token['color']
        
        # Determine text color based on background color brightness
        # Use white text for dark backgrounds, black text for light backgrounds
        r, g, b = mcolors.hex2color(color)
        brightness = (r * 299 + g * 587 + b * 114) / 1000
        text_color = "#FFFFFF" if brightness < 0.5 else "#000000"
        
        html_content += f"""
        <div class="tooltip">
            <span class="token" style="background-color: {color}; color: {text_color};">T{token_id}</span>
            <span class="tooltiptext">
                Token ID: {token_id}<br>
                Probability: {prob:.6f}<br>
                Score: {score:.2f}
            </span>
        </div>"""
    
    # Close HTML
    html_content += """
    </div>
</body>
</html>
"""
    
    # Write HTML to file
    with open(output_file, 'w') as f:
        f.write(html_content)
    
    logger.success(f"HTML visualization saved to {output_file}")
    return True

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Create HTML visualization of token probabilities')
    parser.add_argument('input_file', help='Input JSONL file with token data')
    parser.add_argument('--output', '-o', help='Output HTML file', default='token_viz.html')
    parser.add_argument('--mode', '-m', help='Visualization mode (absolute or relative)', default='absolute', choices=['absolute', 'relative'])
    args = parser.parse_args()
    
    # Load token data
    try:
        tokens = load_jsonl(args.input_file)
        if not tokens:
            logger.error(f"No token data found in {args.input_file}")
            return 1
    except Exception as e:
        logger.error(f"Error loading token data: {e}")
        return 1
    
    # Create visualization
    try:
        create_html_visualization(tokens, args.output, args.mode)
        logger.success(f"HTML visualization saved to {args.output}")
    except Exception as e:
        logger.error(f"Error creating visualization: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 